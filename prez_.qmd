---
title: "A space-time cut-cell method for phase change: from stationary geometries to moving interfaces"
authors: 
  L. Libat, 
  V. Le Chenadec, 
  E. Chénier, 
  C. Selçuk
date: "2025-04-10"
date-format: long
institute: "Multiscale Modeling and Simulation Laboratory, Gustave Eiffel University, Champs-sur-Marne, France"
bibliography: references.bib
highlight-style: github
format:
    revealjs: 
        theme: default
        logo: images/MSME.jpg
        css: styles.css
        slide-number: true
        preview-links: auto
        toc: true
        toc-depth: 1
        footer: |
            <p>© 2025 L. Libat, V. Le Chenadec, E. Chénier, C.Selçuk</p>
---

# Introduction

## Context

- **Interfacial Flows:** Two immiscible phases separated by a sharp interface.  
- **Phase Change:** Solid ⇄ liquid (etc.), often driven by latent heat.

::: {layout-ncol=2}
![Ice Formation](images/ice.jpg){width=19.5em}

![Diphasic fire hose](images/firefighter.png){width=23em}
:::

**Goals & Challenges**
- Preserve interface sharpness
- Enforce conservation (mass, energy, momentum)
- Manage complex/moving boundaries

---

## Classical Phase Change Problems

::: {layout-ncol=2}
- **Stefan-type** problems, where a moving boundary separates solid & liquid  
- Common examples:  
  - Melting from a hot boundary  
  - Solidification from a cooled boundary  
  - Freezing of a supercooled liquid

![](images/ice_melting.gif){width=70% fig-align="center"}
:::

**Key Equation (One-Phase Stefan)**

$$
\begin{aligned}
&\text{Find } T(x,t)\ \text{and interface } s(t) \text{ such that:}\\
&\quad \partial_t T - \nabla\cdot(k\,\nabla T) = 0, \quad x \in \Omega(t),\\
&\quad T(s(t),t) = T_m, \quad 
\rho\,L\,\frac{ds}{dt} \;=\; \bigl[\![\,k\,\nabla T \cdot \mathbf{n}\,]\!\bigr].
\end{aligned}
$$

# Why a Cut-Cell Method?

## Motivation

1. **Sharp Interface on Cartesian Grids**  
   - No body-fitted mesh required  
   - Direct enforcement of interface conditions
2. **Conservation**  
   - Mass and energy flux are computed exactly at the cut faces
3. **Straightforward to Extend to Moving Interfaces**  
   - Fresh/dead cells handle domain changes

![](images/two_fluid_stef.png){width=85% fig-align="center"}


# Stationary geometries

- **Key Idea**: Standard finite-volume integration, but some cells are “cut” by the interface
- **Operators** (Divergence & Gradient) are adapted to partial faces
- **Interface Treatment**: Linear representation with imposed boundary/jump conditions

---

## Heat Equation

The heat equation describes temperature evolution in a medium:

$$
\frac{\partial T}{\partial t} = \nabla \cdot (k \nabla T) + S
$$

Where:

- $T$ is temperature
- $k$ is thermal conductivity
- $S$ is source term

---

## Continuous Formulation: Cell Integration

Integrating over control volume $\Omega_i$:

$$
\int_{\Omega_i} \frac{\partial T}{\partial t} \, dV = \int_{\Omega_i} \nabla \cdot (k \nabla T) \, dV + \int_{\Omega_i} S \, dV
$$

Apply divergence theorem:

$$
\int_{\Omega_i} \frac{\partial T}{\partial t} \, dV = \int_{\partial\Omega_i} k \nabla T \cdot \mathbf{n} \, dS + \int_{\Omega_i} S \, dV
$$

---

## Continuous Formulation: With Interface

For cells containing an interface $\Gamma_i$, we separate the boundary integral:

$$
\int_{\Omega_i} \frac{\partial T}{\partial t} \, dV = \int_{\partial\Omega_i \setminus \Gamma_i} k \nabla T \cdot \mathbf{n} \, dS + \int_{\Gamma_i} k \nabla T \cdot \mathbf{n} \, dS + \int_{\Omega_i} S \, dV
$$

- $\partial\Omega_i \setminus \Gamma_i$ represents regular cell faces
- $\Gamma_i$ is the interface portion within the cell
- $\mathbf{n}$ is the outward normal vector

---

## Time Integration

Integrating in time from $t^n$ to $t^{n+1}$:

$$
\int_{\Omega_i} (T^{n+1} - T^n) \, dV = \Delta t \left[ \int_{\partial\Omega_i \setminus \Gamma_i} k \nabla \tilde{T} \cdot \mathbf{n} \, dS + \int_{\Gamma_i} k \nabla \tilde{T} \cdot \mathbf{n} \, dS + \int_{\Omega_i} \tilde{S} \, dV \right]
$$

Where $\tilde{T}$ represents a time-averaged temperature:
$$\tilde{T} = \theta T^{n+1} + (1-\theta)T^n$$

- $\theta = 0$: Explicit Euler (first-order)
- $\theta = 1$: Implicit Euler (first-order)
- $\theta = 1/2$: Crank-Nicolson (second-order)

---

## Regular Cell Discretization

For a standard cell with volume $V_i$ and regular faces:

$$
V_i (T_i^{n+1} - T_i^n) = \Delta t \left[ \sum_{f \in \text{faces}} k A_f \nabla_f(\tilde{T}) + S_i V_i \right]
$$

Where:

- $A_f$ is a regular face area
- $\nabla_f(\tilde{T})$ is the temperature gradient at regular face $f$
- $S_i$ is the source term in cell $i$

---

## Cut Cell Discretization

For cells cut by an interface:

$$
V_i(T_i^{n+1} - T_i^n) = \Delta t \left[ \sum_{f \in \text{reg}} k A_f \nabla_f(\tilde{T}) + F_{\Gamma} + S_i V_i \right]
$$

Interface flux term:
$$
F_{\Gamma} = k A_{\Gamma} \nabla_{\Gamma}(\tilde{T})
$$

Where:

- $A_f$ is regular face area
- $A_{\Gamma}$ - interface area segment
- $\nabla_{\Gamma}(\tilde{T})$ is the temperature gradient at the interface

## Regular Cell Discretization: Face Gradients

For gradient computation, we apply Stoke's theorem in the staggered cells $\Omega_{i+1/2}$:
$$
\int_{\Omega_{i+1/2}} \nabla T  dV = \int_{\partial\Omega_{i+1/2}} T \mathbf{n} dS
$$

where $\partial\Omega_{i+1/2}$ is the boundary of the staggered cell.

The face gradient $\nabla_f(\tilde{T})$ for face $f$ between cells $i$ and $i+1$ is approximated as:

$$
V_{i+1/2} \nabla_f(\tilde{T}) = B_f \left( \tilde{T}_{i+1} - \tilde{T}_{i} \right)
$$

Where:

- $V_{i+1/2}$ is the volume of the staggered cell
- $B_f$ is the staggered face area
- $\tilde{T}_i$ is the average temperature in cell $i$

---

## Cut Cell Discretization: Interface Flux

For cells cut by an interface:

$$
V_i(T_i^{n+1} - T_i^n) = \Delta t \left[ \sum_{f \in \text{reg}} k A_f \nabla_f(\tilde{T}) + F_{\Gamma} + S_i V_i \right]
$$

The interface flux term $F_{\Gamma}$ depends on boundary conditions:

::: {.incremental}
- **Dirichlet Condition**: Prescribed temperature at the interface : $T=g(\mathbf{x})$ 
$$
F_{\Gamma} = F_{x,\Gamma} + F_{y,\Gamma} = k A_{\Gamma} \left( \nabla_{x, \Gamma}(\tilde{T}) + \nabla_{y, \Gamma}(\tilde{T}) \right)
$$
Where:
- $F_{x,\Gamma}$ and $F_{y,\Gamma}$ are the interface gradients fluxes in the $x$ and $y$ directions respectively


- **Neumann Condition**: Prescribed heat flux at the interface : $k \nabla T \cdot \mathbf{n} = q_{\Gamma}$
$$
F_{\Gamma} = q_{\Gamma} A_{\Gamma}
$$
Where $q_{\Gamma}$ is the prescribed heat flux at the interface.

- **Robin Condition**: Mixed condition : $\alpha T + \beta k \nabla T \cdot \mathbf{n} = g$
:::

## Discretized System: Complete Heat Equation

For cells cut by an interface, the discretized heat equation with Robin boundary conditions becomes:

$$
\begin{aligned}
V_i(T_i^{n+1} - T_i^n) = \Delta t \left[ \sum_{f \in \text{reg}} k A_f \nabla_f(\tilde{T}) + F_{\Gamma} + S_i V_i \right]
\end{aligned}
$$

This leads to the global linear system:

$$
\begin{bmatrix}
\text{Bulk part Heat Equation} & \text{Interface part Heat Equation} \\
\text{Interface part BC} & \text{Interface part BC}
\end{bmatrix}
\begin{bmatrix}
T^{n+1}_{\text{bulk}} \\
T^{n+1}_{\text{interface}}
\end{bmatrix} =
RHS
$$

- Implicit time-stepping
- Coupling between bulk and interface terms
- Enforce boundary conditions directly in the system
- No need for ghost cells or extrapolation

---

## Validation Case: 2D Heat Equation

To validate the method, [@Polyanin2016] :

::: {#fig-heat layout-ncol=2}
![Backward Euler](images/conv_max_BE.png){#fig-heat-be}

![Crank-Nicolson](images/conv_max_CN.png){#fig-heat-cn}

Convergence in $L^\infty$ norm showing expected accuracy: 1st order (BE) and 2nd order (CN)
:::

---

## Two-Phase Heat Equation

Next we extend to problems with different materials across the interface:

$$
\begin{aligned}
\frac{\partial T_i}{\partial t} - \nabla \cdot (k_i \nabla T_i) &= S_i \quad \text{in } \Omega_i, \quad i=1,2 \\
[[\alpha T]] &= g \quad \text{on } \Gamma \\
[[k \nabla T \cdot \mathbf{n}]] &= h \quad \text{on } \Gamma
\end{aligned}
$$
With temperature and flux matching conditions across the interface


The discretized system becomes:

$$
\begin{bmatrix}
\text{Heat Equation 1} \\
\text{Temperature Jump} \\
\text{Heat Equation 2} \\
\text{Flux Jump}
\end{bmatrix}
\begin{bmatrix}
T^{n+1}_{\text{bulk 1}} \\
T^{n+1}_{\text{interface 1}} \\
T^{n+1}_{\text{bulk 2}} \\
T^{n+1}_{\text{interface 2}}
\end{bmatrix} =
RHS
$$

## Validation Case: 2D Two-Phase Heat Equation

To validate the method, [@2025TwoPhase] :

::: {#fig-heat2}
![ ](images/heat_2ph_temp_conv.png){width="100%"}

Second-order convergence in $L^2$ norm for full cells, Superlinear convergence for cut cells.
:::

## Validation Case: 2D Two-Phase Heat Equation

![](images/heat_2d_2ph_henry_end.png){fig-align="center"}

## Validation Case: 2D Two-Phase Heat Equation

::: {#fig-heat-2ph-sherwood layout-ncol=2}

![Heat Transfer number](images/Sherwood.png){#fig-heat-2ph-sherwood}

![Zoom](images/Sherwood_zoom.png){#fig-heat-2ph-sherwood-zoom}

Heat Transfer number
:::

# Moving Interfaces

- **Space-Time Approach**: Combine time with spatial domain: extrude cells across $\Delta t$
- **Two Key Scenarios**:
  - Prescribed Motion (solid body movement)
  - Interface Problem (Stefan condition-driven)

---

## Space-Time Discretization

![From 1D Space Mesh to 2D Space-Time Mesh](images/space_time_mesh.svg)

---

## Reynolds Transport Theorem

Let $f$ be a scalar field:

$$
\frac{d}{dt} \int_{\Omega(t)} f\, dV
=
\int_{\Omega(t)} \frac{\partial f}{\partial t}\, dV
+
\int_{\partial \Omega(t)} \bigl(\mathbf{w}\cdot\mathbf{n}\bigr) f\, dS,
$$

- $\Omega(t)$ is a moving/deforming control volume  
- $\mathbf{w}$ is the velocity of the moving boundary
- $\mathbf{n}$ is the outward normal on $\partial \Omega(t)$

For $f=1$, we get the Geometric Conservation Law:

$$
V^{n+1} - V^n
=
\int_{t_n}^{t_{n+1}} \int_{\partial \Omega(t)} \mathbf{w}\cdot d\mathbf{S}\, dt.
$$

---

## Problem Discretization for Moving Interfaces

Applying the Reynolds Transport Theorem to the heat equation in a moving domain $\Omega_i(t)$:

$$
\begin{aligned}
\int_{t_n}^{t_{n+1}} \int_{\Omega_i(t)}
\left( \frac{\partial T}{\partial t} - \nabla \cdot (k \nabla T) - S \right)\,dV\,dt = 0
\end{aligned}
$$

This expands to:

$$
\begin{aligned}
\underbrace{V_i^{n+1} T_i^{n+1} - V_i^{n} T_i^{n}}_{\substack{\text{net change of}\\T\text{ in domain}}}
&-\underbrace{\int_{t_n}^{t_{n+1}} \int_{\partial \Omega_i(t)}
\mathbf{w}\cdot \mathbf{n} \, T \, dS\,dt}_{\substack{\text{boundary motion}\\\text{contribution}}} \\
&= \Delta t \left[ \underbrace{\sum_{f \in \text{reg}} k A_f \nabla_f(\tilde{T})}_{\substack{\text{spatial flux}\\\text{through regular faces}}} 
+ \underbrace{F_{\Gamma}}_{\substack{\text{flux across}\\\text{moving interface}}} 
+ \underbrace{S_i V_i^{\text{avg}}}_{\text{source term}} \right]
\end{aligned}
$$

## Problem Discretization for Moving Interfaces

This expands to:

$$
\begin{aligned}
\underbrace{V_i^{n+1} T_i^{n+1} - V_i^{n} T_i^{n}}_{\substack{\text{net change of}\\T\text{ in domain}}}
&-\underbrace{(V_i^{n+1} - V_i^{n}) T^\gamma}_{\substack{\text{boundary motion}\\\text{contribution}}} \\
&= \Delta t \left[ \underbrace{\sum_{f \in \text{reg}} k A_f \nabla_f(\tilde{T})}_{\substack{\text{spatial flux}\\\text{through regular faces}}} 
+ \underbrace{F_{\Gamma}}_{\substack{\text{flux across}\\\text{moving interface}}} 
+ \underbrace{S_i V_i^{\text{avg}}}_{\text{source term}} \right]
\end{aligned}
$$

Where:

- $V_i^{n+1}$, $V_i^{n}$ are cell volumes at time levels $n+1$ and $n$
- $T_i^{n+1}$, $T_i^{n}$ are cell temperatures at time levels $n+1$ and $n$
- $T^\gamma$ is the temperature at the interface
- $V_i^{\text{avg}}$ is the time-averaged cell volume

---

## Space-Time Cut Cell Discretization

![Space-Time cut cell: Moving Interface](images/space_time_div_mov.svg){width="100%" align="center"}

$$
\begin{aligned}
\underbrace{T_i^{\omega,n+1} V_i^{n+1} - T_i^{\omega,n} V_i^{n}}_{\substack{\text{net change of} \\ c_p\,T\text{ in domain}}} + \underbrace{(V_i^{n+1} - V_i^{n}) T_i^{\gamma}}_{\substack{\text{boundary motion} \\ \text{contribution}}}
+ \underbrace{\Delta t\, q_{i+1/2}^{\omega}}_{\substack{\text{spatial flux} \\ \text{through faces}}} - \underbrace{\Delta t\, q_{i-1/2}^{\gamma}}_{\substack{\text{flux across} \\ \text{moving interface } \Gamma(t)}} = 0
\end{aligned}
$$

---

## Fresh/Dead Cell Problem

- **Interface Crossing:** During $\Delta t$, cells may change status:
  - **Fresh cells:** Empty at $t^n$, wet at $t^{n+1}$
  - **Dead cells:** Wet at $t^n$, empty at $t^{n+1}$

::: {layout-ncol="2"}
![Fresh Cell](images/freshcell.svg){width="100%"}

![Dead Cell](images/deadcell.svg){width="100%"}
:::

- **Energy Conservation:** Still solve the heat equation in these cells. Ensures global conservation.

---

## Implicit Interface Tracking

- Stefan Problem : 
    - Coupled problem between heat equation and interface motion (interface position depends on temperature and vice versa)
    - Nonlinear problem 
    - Interface velocity determined by latent heat balance:
    $$
    \rho\,L\,\dot{s} = [[\mathbf{q}\cdot\mathbf{n}]]
    $$

- **Interface Representation** : B-Spline parametrization with Height functions
- **Goal:** Conserve this coupling discretely => Implicitly track the interface.

---

## VOF Advection vs. Newton Method

::: {layout-ncol="2"}
::: {.column}
**Traditional VOF Approach:**

[see @Weymouth2010]

$$
\frac{\partial \alpha}{\partial t} + \nabla\cdot(\alpha\,\mathbf{u}) = 0
$$

- Interface advection
- Numerical diffusion, splitting errors

![VOF Advection Schematic](images/vof_advection.png){width=100%} 
:::

::: {.column}

:::
:::

---

## VOF Advection vs. Newton Method

::: {layout-ncol="2"}

::: {.column}
**Traditional VOF Approach:**

[see @Weymouth2010]

$$
\frac{\partial \alpha}{\partial t} + \nabla\cdot(\alpha\,\mathbf{u}) = 0
$$

- Interface advection
- Numerical diffusion, splitting errors

![VOF Advection Schematic](images/vof_advection.png){width=100%}

:::

::: {.column}
**Our Newton-Based Method:**

[see @Libat2025]

$$
\rho L \frac{\partial s}{\partial t} = [[\mathbf{q}\cdot\mathbf{n}]]
$$

- Enforces conservation
- Iteratively updates interface

![Newton-Based Schematic](images/rootfindingnewton.jpg){width=55%}
:::
:::

---


## Newton-Based Interface Update

- **Iterative Procedure:**
  1. **Guess:** Initial interface position $s^{n+1,(k)}$
  2. **Build:** Cut-cell geometry and operators
  3. **Solve:** Heat equation for temperature field
  4. **Residual:** Compute $\mathrm{res}_k = F(s^{n+1,(k)},\mathbf{x}_k)$
  5. **Update:** $H^{n+1,(k+1)} = H^{n+1,(k)} - \alpha\,\mathrm{res}_k$
  6. **Reconstruct:** Update interface position $s^{n+1,(k+1)}$
  7. **Repeat** until convergence

---

## Test Case: 1D Stefan Problem

- **Problem:**
  - Fusion of a solid bar
  - Initial temperature $T_0 = 0$ (cooled melting)
  - Dirichlet boundary condition $T = 1$

::: {layout-ncol="2"}
![Interface position](images/stefan_1D_interface.png){width=100%}

![Temperature profile](images/temp_stef_1d_2ph.png){width=100%}
:::

---

## Test Case: 2D Stefan Problem

::: {layout-ncol="2"}
![Interface convergence](images/stefan_2d_Inter_Conv.png){width=100%}

![Temperature evolution](images/stefan_2D_2ph_temp.gif){width=100%}
:::

---

## Newton Method: Convergence Properties

- **Convergence Rate:**
  - Linear convergence for not so stiff problems
  - Observed $O(k^{1.1})$ in our numerical tests

::: {layout-ncol="2"}
![Residual decay](images/stefan_1D_residual.png){width=80%}

![Iterations per timestep](images/residual_withguess.png){width=80%}
:::

- **Initial Guess:**
  - Extrapolation method provides good initial guess : $s^{n+1,(0)} = s^n$
  - Velocity-based guess also effective : $s^{n+1,(0)} = s^n + \Delta t \cdot v^n$

---


## Mullins-Sekerka Theory

- **Morphological Instability:** [@Mullins1964]
  - Small perturbations to a planar solid-liquid interface can grow/decay
  - Leads to dendritic patterns in solidification

- **Governing Physics:**
  - Gibbs-Thomson relation: $T|_{interface} = T_m - \Gamma\kappa - \beta V_n$
    - $T_m$ is melting temperature
    - $\kappa$ is interface curvature
    - $V_n$ is normal velocity

- **Dispersion Relation:**
  - Linear stability analysis leads to a dispersion relation
  - Growth rate $\omega(k)$ depends on wavenumber $k$ and system parameters

---

## Test Case: Mullins-Sekerka Instability

- **Problem:**
  - Solidification of a supercooled liquid
  - Initial perturbation on planar interface
  - Growth/decay of perturbations following Gibbs-Thomson relation

::: {layout-ncol="2"}
![Interface evolution](images/mullins_sekerka_interface.png){width=100%}

![Temperature field](images/mullins_sekerka_temp.gif){width=100%}
:::

# Conclusion & Perspectives

## Conclusions

- Cut-cell method for stationnary geometries:
  - Conservation of physical quantities
  - Super-linear rate of convergence and good accuracy
  - No need to interpolate the boundary condition

- Implicit Interface tracking with Newton-based method:
  - Enforces conservation at the interface
  - Iteratively adjusts the interface position
  - Agnostic to the interface parametrization

---

## Perspectives

- Testing a front-tracking approach for the interface tracking
- Two-phase flow Navier-Stokes solver :
  - Solve for pressure and velocity fields 
  - Fully coupled method

- Coupling with the actual Heat/Species solver

- Preconditioning strategies and parallelization


# Q&A

Thank you for your attention!
Any questions?

## References

::: {#refs}
:::

# Appendix

## Appendix: Interface Reconstruction

- **Height Function Approach:**
  - Interface represented as height in each column
  - Reconstructed with piecewise B-splines
  - Volume conservation enforced:
    $$\int_{y_j}^{y_{j+1}} H(y)\,dy \approx \alpha_j\,\Delta x $$

- **Parameterization:**
  - B-spline representation: $H(x) = \sum_{k} a_k B_k^{(d)}(x)$
  - Different degrees $d$ control smoothness
  - Coefficients $a_k$ determined by solving a linear system (if periodic) or least-squares fitting (if not periodic)

---

## Appendix: Mullins-Sekerka Dispersion Relation

- **Linear Stability Analysis:**
  - Base state: $T_{st}(y) = T_m + G\,y$ (flat interface at $y=0$)
  - Perturbed interface: $h(x,t) = h_0 \sin(kx)e^{\omega t}$

- **Resulting Dispersion Relation:**
  $$\omega(k) = -\frac{k_l\,k\,(\Gamma\,k^2 + G)}{\rho L + k_l\,k\,\beta}$$

- **Instability Condition:**
  - Growth when $G < 0$ and $|G| > \Gamma k^2$ (undercooled melt)
  - Maximum growth at $k_\text{max} = \sqrt{|G|/3\Gamma}$ (when $\beta \approx 0$)

---

## Appendix: Gibbs-Thomson Effects

::: {layout-ncol="2"}
![With Gibbs-Thomson](images/interface_with_GT.png)

![Without Gibbs-Thomson](images/interface_without_GT.png)
:::

- **Surface Tension Effects:**
  - Regularizes interface (prevents numerical instabilities)
  - Smooths high curvature regions
  - Physically essential for dendrite tip selection

---


## Appendix : Adaptive Time-Stepping

- **Algorithm:**
  1. Set initial timestep $\Delta t$
  2. Perform Newton iterations for interface update
  3. **Adjust based on convergence:**
     - If iterations > threshold: Reduce $\Delta t = \alpha \Delta t$ (typically $\alpha = 0.5$)
     - If iterations < threshold: Increase $\Delta t = \Delta t/\alpha$ (typically up to 1.5×)
  4. Enforce $\Delta t_{min} \leq \Delta t \leq \Delta t_{max}$

- **Benefits:**
  - 40-60% reduction in total computational time
  - Automatically handles stiff regions
